extends ../layouts/interactive-docs

block prepend head
    -var document_title = ': Working with the project'

block main
    .container
        +heading('h1')(class='heading__h2') Working with the project
        +heading('h2')(class='heading__h3') Markup
        p.paragraph The project's working files are in pug syntax. This is a short entry, which, in addition to short, allows you to do many cool things, for example template inheritance, use of mixins, partial use the js-syntax for project layout.
        p.paragraph Full and detailed documentation on how to work with the project you can find on 
            +link('https://pugjs.org').link the official website
            | .
        p.paragraph At us all is implemented by the following logic:
        
        
        +heading('h3')(class='heading__h4') Templates
        p.paragraph Template partials are placed in diferent folders:
        ul.list
            li.list_item #[code.code src/markup/layouts/] markup
            li.list_item #[code.code src/style/layouts/] styles
            li.list_item #[code.code src/markup/&#91;template name&#93;] sources of pages
            
        +heading('h3')(class='heading__h4') Blocks
        p.paragraph In this project used lots of blocks from FA-Kit library, and we created many uniq blocks (read BEM-methodology). All them placed in #[code.code src/blocks/]. Every has its name and set of dependencies.
        p.paragraph For example we created mixin for heading. It gets aruments and output after render simple heading. To use it you need to add attach it in template (#[code.code src/markup/layouts/&#91;template name&#93;]) or in page (#[code.code src/markup/layouts/&#91;template name&#93;/&#91;page name&#93;]).
        p.paragraph In the block's folder you can find pug file heading.pug. Upper we talked about it, that you need to attach. And after use like this #[code.code +heading('h1') Heading content]
        
        +heading('h3')(class='heading__h4') Demo
        p.paragraph All demo data you can find here: #[code.code src/data].
        
        +heading('h3')(class='heading__h4') Build manifest
        p.paragraph Mostly files in build connects by hand. It means we used manifest, that you can find here #[code.code src/build.js].
        
        +heading('h3')(class='heading__h4') FA-Kit
        p.paragraph This framework is in constant development, so it makes sense to check for updates on the project page.
        p.paragraph In addition to these classes and components in the documentation for the usual use of the topic, there are still opportunities for the advanced. In particular — to change variables, in order to get the output design with their styles.
        p.paragraph But no less important are myxins:
        ul.list
            li.list_item #[code.code media_query_up] — for screen sizes larger than the reference point
            li.list_item #[code.code media_query_down] — for screen sizes smaller than the reference point
            li.list_item #[code.code media_query_between] — media query between two points, for example, from xs to lg
            li.list_item #[code.code touch_grid] — to create columns
        p.paragraph There are also classes of type ghost:
        p.paragraph %none-select — It can be inherited when creating other classes so that the user can not allocate content.