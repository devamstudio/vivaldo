extends ../layouts/interactive-docs

block prepend head
    -var document_title = ': Integrations'

block main
    .container
        +heading('h1')(class='heading__h2') Integrations
        p.paragraph
            +link('#irage').link Icons Rage
            |  \ 
            +link('#fakit').link FA-Kit
            
        +heading('h2')(class='heading__h3' id='irage') Icons Rage
        p.paragraph As we already mentioned above, this set is the one we created for this project. Although it began to be created long before that. This set contains 51 icons.
        
        +heading('h3')(class='heading__h4') Using fonts
        p.paragraph To use fonts, you need to connect it to the html document.
        p.paragraph Then, using the &lt;i/&gt; tag, you can add icons into the page. And you can specify the classes:
        ul.list
            li.list_item rage-fw — Icons will be fixed width
            li.list_item rage-lg — To make larger icon
            li.list_item rage-2x — To iscale icon 2 times
            li.list_item rage-3x — To iscale icon 3 times
            li.list_item rage-4x — To iscale icon 4 times
            li.list_item rage-5x — To iscale icon 5 times
        
        +heading('h3')(class='heading__h4') List of icons
        ul.list(style='columns:12em;')
            li.list_item chevron-right
            li.list_item chevron-left
            li.list_item chevron-top
            li.list_item chevron-bottom
            li.list_item close
            li.list_item burger
            li.list_item arrow-right
            li.list_item arrow-left
            li.list_item arrow-top
            li.list_item arrow-bottom
            li.list_item dots
            li.list_item checkboxes
            li.list_item list
            li.list_item maximize
            li.list_item minimize
            li.list_item video
            li.list_item image
            li.list_item heart
            li.list_item heart-filled
            li.list_item print
            li.list_item envelope
            li.list_item locked
            li.list_item unlocked
            li.list_item search
            li.list_item download
            li.list_item upload
            li.list_item map-point
            li.list_item user
            li.list_item group
            li.list_item settings
            li.list_item dashboard
            li.list_item compare
            li.list_item busket-truck
            li.list_item mobile
            li.list_item play
            li.list_item pause
            li.list_item play-forward
            li.list_item play-back
            li.list_item mix
            li.list_item loop
            li.list_item volume
            li.list_item soundtrack
            li.list_item album
            li.list_item ticket
            li.list_item section
            li.list_item folder
            li.list_item book
            li.list_item notes
            li.list_item code
            li.list_item branch
            li.list_item hand-watches






        +heading('h2')(class='heading__h3' id='fakit') FA-Kit
        p.paragraph
            +link('#fakit_variables').link Variables
            |  \ 
            +link('#fakit_grid').link Grid
            |  \ 
            +link('#fakit_blocks').link Blocks
            |  \ 
            +link('#fakit_breadcrumbs').link Vreadcrumbs
            |  \ 
            +link('#fakit_buttons').link Buttons
            |  \ 
            +link('#fakit_helpers').link Helpers
            |  \ 
            +link('#fakit_media').link Media
            |  \ 
            +link('#fakit_notifications').link Notifications
            |  \ 
            +link('#fakit_pagination').link Pagination
            |  \ 
            +link('#fakit_utilites').link Utilites
            
        p.paragraph Sometimes we call this project a framework, but in fact it's just a library \ set of instructions for styles that already simplify the life for us and should help you.
        p.paragraph The general principle of construction should be familiar to you on bootstrap, but in our case there is a significant rethinking of the principles of approach and implementation of the work. We do not want to brag much, but we started using flex before it came to bootstrap in the latest version.
        .notification.notification__warning.margin__bottom-1
            p.paragraph Draw your attention, this framework is devoid of js-files, we implement all the integration in the project itself. But everything can change in the future. Track the project here. And now about the main thing.
        p.paragraph In this framework, we used the approach that BEM inspired us:
        ul.list
            li.list_item Block
            li.list_item Element
            li.list_item Modifier
        p.paragraph In classes this is expressed in such way:
        ul.list
            li.list_item .block — conditional block
            li.list_item .block_link — link within this block
            li.list_item .block_link__hovered — link state
        p.paragraph In order to ensure maximum non-conflict, all blocks are equipped with the prefix ., and it looks like this:
        p.paragraph .block__background-light — A block with such an independent class will be displayed with a light gray background.
        .notification.notification__warning.margin__bottom-1
            p.paragraph Draw your attention: we almost do not use abbreviations in the construction of classes. This visually makes the list of classes heavier, but it becomes easier to understand what is happening or should happen to the element directly on the html page.
        p.paragraph The following main sections are represented in this framework:

        +heading('h3')(class='heading__h4' id='fakit_variables') Variables
        p.paragraph The following are the main variables that will be further described in the library classes. For a detailed list, move to the section for advanced use.
        .row
            .cols__xs-12.cols__xl-4
                +heading('h4')(class='heading__h5' id='fak_colors') Colors
                p.paragraph There are several colors, here they are:
                ul.list
                    li.list_item Primary — sapphirine
                    li.list_item Secondary — orange
                    li.list_item Alert — red
                    li.list_item Warning — orange
                    li.list_item Ok — green
                    li.list_item Black — black
                    li.list_item White —  white
                    li.list_item Light — light gray
                    li.list_item Dark  — dark gray

            .cols__xs-12.cols__xl-4
                +heading('h4')(class='heading__h5' id='fak_containers') Dimensions of the container
                ul.list
                    li.list_item xs: 100%
                    li.list_item sm: 100%
                    li.list_item md: 1000px
                    li.list_item lg: 1200px
            .cols__xs-12.cols__xl-4
                +heading('h4')(class='heading__h5' id='fak_media') Transition limits (media queries)
                ul.list
                    li.list_item xs: 500px
                    li.list_item sm: 900px
                    li.list_item md: 1024px
                    li.list_item lg: 1220px
                    li.list_item xl: от 1220px

        +heading('h3')(class='heading__h4' id='fakit_grid') Grid
        p.paragraph This, perhaps, the most important thing for which the library was created, allows you to manipulate the grid on the page. By the way, allows you to do this easier than in the bootstrap, which is a big plus in our karma.
        p.paragraph The classes of wrappers that are present here:
        ul.list
            li.list_item #[code.code container] is a container that we are familiar with, which follows the rules of the size in accordance with the dimensions of the container.
                ul.list
                    li.list_item #[code.code container__wide] — if this class is applied, the container will stretch to the full width.
            li.list_item #[code.code row] is a string for building a grid.
            li.list_item #[code.code column] is an unexpected element, made like row, but for a column.
        p.paragraph The classes of grid construction are formed as follows:
        p.paragraph #[code.code .cols__&#91;media&#93;-&#91;cols&#93;], where media are media inquiries of type xs, and cols is the count of columns or rows. A total of them can be 12 (easily changed at an advanced level.)


        +heading('h3')(class='heading__h4' id='fakit_blocks') Blocks
        p.paragraph In this section, there is a class with modifiers .g-block__background-color. As a color, you can use the name of the color variable, as follows:
        p.paragraph .block__backgound-ok — the background color will be green.

        
        +heading('h3')(class='heading__h4' id='fakit_breadcrumbs') Bread crumbs
        p.paragraph This class is represented by the name .g-breadcrumbs and is applied to the cover of the list, for example, the tag nav. A list ul is created inside it, where the arrow symbol → is inserted in the <a> </a> link tags.
        p.paragraph Example of usage in the code:
        pre.code.code__snippet
            | &lt;nav class="breadcrumbs">
            |     &lt;ul>
            |         &lt;li>&lt;a href="#">Home&lt;/a>&lt;/li>
            |         &lt;li>&lt;span>Artist&lt;/span>&lt;/li>
            |     &lt;/ul>
            | &lt;/nav>


        +heading('h3')(class='heading__h4' id='fakit_buttons') Buttons
        p.paragraph The main class for creating a button is the .g-button. But, in order to add a design to it, you need to specify its style, for example .g-button__primary — then the button will turn blue with white text on it (for example, on the right). Or .g-button__white (for example, on the left).
        p.paragraph The code will then look like this:
        pre.code.code__snippet
            | &lt;a class="button button__white margin__right-1" href="#">
            |     &lt;svg class="rage margin__right-1">
            |         &lt;use xlink:href="#rage-mix">&lt;/use>
            |     &lt;/svg>
            |     &lt;span>Mix&lt;/span>
            | &lt;/a>
        p.paragraph Also there is a class .button__disabled — it makes the button visually inaccessible to the user. Works fine in pairs with the html-property disabled.

        +heading('h3')(class='heading__h4' id='fakit_helpers') Helpers
        p.paragraph Here are the classes:
        ul.list
            li.list_item hidden__[media]
                ul.list
                    li.list_item hidden__[media]-up
                    li.list_item hidden__[media]-down
            li.list_item g-visible__[media]
                ul.list
                    li.list_item visible__[media]-up
                    li.list_item visible__[media]-down
        p.paragraph Instead of media, substitute the size you need. And then you can hide and display items on the page. The styles of the visible class are lower than hidden, so they have a higher priority.

        +heading('h3')(class='heading__h4' id='fakit_media') Media
        p.paragraph At the moment, there is only #[code.code .image] with the extra class #[code.code .image__fluid], which limits the image to the width inside the container.
        
        +heading('h3')(class='heading__h4' id='fakit_notifications') Notifications
        p.paragraph They have the main class .g-notification, which has the following modifiers:
        ul.list
            li.list_item .notification__top — the border of the stroke will be on top
            li.list_item .notification__left — or from below
            li.list_item .notification__alert — its color will be red
            li.list_item .notification__warning — orange
            li.list_item .notification__ok — or green
        p.paragraph At this time, the block itself has a white background, a shadow and indented indentations in and out.

        +heading('h3')(class='heading__h4' id='fakit_pagination') Pagination
        p.paragraph #[code.code .pagination] — A wrapper that nulls list styles (ul or ol)
        p.paragraph #[code.code .pagination__center] — allows you to center on the page a list of pagination
        p.paragraph The #[code.code .pagination_item] element has a boundary, a #[code.code .pagination__active] state, and a description of the nested reference (item must be applied to the element of the list li).

        +heading('h3')(class='heading__h4' id='fakit_utilites') Utilities
        p.paragraph The block, in which the values of the indents are indicated, is constructed next to this logic:
        ul.list
            li.list_item .[type]__[direction]-[offset-size]
            li.list_item .[type]__[media]-[direction]-[offset-size]
        p.paragraph Where is:
        p.paragraph type — margin или padding
        p.paragraph media — media queries 
        p.paragraph direction — direction (top, bottom, left, right, xx [in both directions along the X axis], yy [in both directions along the Y axis])
        p.paragraph For indentation in all directions, we recommend using the following construction:
        pre.code.code__snippet
            | &lt;a class="margin__xx-5 margin__yy-5">
            | &lt;/a>